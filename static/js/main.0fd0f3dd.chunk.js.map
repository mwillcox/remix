{"version":3,"sources":["components/Trip/index.js","components/Bus/index.js","components/Board/index.js","components/App/index.js","serviceWorker.js","index.js"],"names":["Trip","id","start","end","isSelected","divStyle","container","width","left","style","className","Bus","props","onClick","bind","e","this","handleClick","target","label","busTrips","selectedTrip","busLabel","trips","map","trip","key","busId","startTime","endTime","React","Component","defaultProps","Board","state","busData","tripData","elementName","clickedId","parseInt","currentTrip","includes","onTripClick","onBusClick","clickedTrip","find","t","setState","currentBusData","maxBusId","Math","max","updatedBusList","clickedBusTrips","filter","b","hasConflict","forEach","updatedTrips","counter","busRows","length","Fragment","renderProvisionalBusRow","App","data","buses","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0fd0f3dd.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./styles.css\";\n\nconst Trip = ({ id, start, end, isSelected }) => {\n  const divStyle = {\n    container: {\n      width: end - start,\n      left: start + 100\n    }\n  };\n  return (\n    <div\n      id={id}\n      style={divStyle.container}\n      className={`trip ${isSelected ? \"selected\" : \"\"}`}\n    >\n      {id}\n    </div>\n  );\n};\n\nTrip.propTypes = {\n  id: PropTypes.number.isRequired,\n  busId: PropTypes.number.isRequired,\n  start: PropTypes.number.isRequired,\n  end: PropTypes.number.isRequired,\n  isSelected: PropTypes.bool.isRequired\n};\n\nexport default Trip;\n","import React from \"react\";\nimport Trip from \"../Trip\";\nimport \"./styles.css\";\nimport PropTypes from \"prop-types\";\n\nclass Bus extends React.Component {\n  constructor(props) {\n    super(props);\n    this.onClick = this.onClick.bind(this);\n  }\n\n  onClick(e) {\n    this.props.handleClick(e.target.id, e.target.className);\n  }\n\n  render() {\n    const { id, label, busTrips, selectedTrip } = this.props;\n    const busLabel = label !== 0 ? `Bus ${label}` : \"New Bus\";\n    const trips = busTrips.map(trip => {\n      const isSelected = selectedTrip ? selectedTrip.id === trip.id : false;\n      return (\n        <Trip\n          key={trip.id}\n          id={trip.id}\n          busId={trip.busId}\n          start={trip.startTime}\n          end={trip.endTime}\n          isSelected={isSelected}\n        />\n      );\n    });\n    return (\n      <div className=\"bus-container\" id={id} onClick={this.onClick}>\n        <div className=\"bus-label\">{busLabel}</div>\n        <div className=\"bus-data\">{trips}</div>\n      </div>\n    );\n  }\n}\n\nBus.propTypes = {\n  id: PropTypes.number.isRequired,\n  label: PropTypes.number.isRequired,\n  handleClick: PropTypes.func.isRequired,\n  selectedTrip: PropTypes.object,\n  busTrips: PropTypes.arrayOf(PropTypes.object)\n};\n\nBus.defaultProps = {\n  selectedTrip: null,\n  busTrips: []\n};\n\nexport default Bus;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Bus from \"../Bus\";\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedTrip: null,\n      busData: this.props.busData,\n      tripData: this.props.tripData\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(id, elementName) {\n    const clickedId = parseInt(id);\n    const currentTrip = this.state.selectedTrip;\n    // Clicked on a trip\n    if (elementName.includes(\"trip\")) {\n      this.onTripClick(clickedId, currentTrip);\n    } else {\n      // Clicked on a bus and has a trip selected\n      if (currentTrip !== null) {\n        this.onBusClick(clickedId, currentTrip, elementName);\n      }\n    }\n  }\n\n  onTripClick(clickedId, currentTrip) {\n    const clickedTrip = this.state.tripData.find(t => t.id === clickedId);\n    // Toggle the current trip if it is already selected\n    if (currentTrip && currentTrip.id === clickedId) {\n      this.setState({ selectedTrip: null });\n    } else {\n      this.setState({ selectedTrip: clickedTrip });\n    }\n  }\n\n  onBusClick(clickedId, currentTrip) {\n    // Adds bus to data when a trip is added to a provisional row\n    if (clickedId === 0) {\n      const currentBusData = this.state.busData;\n      const maxBusId = Math.max(...currentBusData) + 1;\n      const updatedBusList = [...currentBusData, maxBusId];\n      this.setState({ busData: updatedBusList });\n      clickedId = maxBusId;\n    }\n    // Fetch all trips assigned to the bus that was clicked on\n    var clickedBusTrips = this.state.tripData.filter(\n      b => b.busId === clickedId\n    );\n    // Determine if the trip intersects with the bus trips\n    let hasConflict = false;\n    clickedBusTrips.forEach(t => {\n      if (\n        t.startTime <= currentTrip.endTime &&\n        currentTrip.startTime <= t.endTime\n      ) {\n        hasConflict = true;\n      }\n    });\n    if (!hasConflict) {\n      const trips = this.state.tripData;\n      var updatedTrips = trips.map(trip => {\n        if (trip.id === currentTrip.id) {\n          return {\n            ...trip,\n            busId: clickedId\n          };\n        } else {\n          return trip;\n        }\n      });\n      // Update state to reflect the newly assigned trip\n      this.setState({ tripData: updatedTrips, selectedTrip: null });\n    }\n  }\n\n  renderProvisionalBusRow() {\n    return (\n      this.state.selectedTrip && (\n        <Bus key={0} id={0} label={0} handleClick={this.handleClick} />\n      )\n    );\n  }\n\n  render() {\n    let counter = 1;\n    const busRows = this.state.busData.map(id => {\n      // Fetch all trips that are assigned to a bus\n      var busTrips = this.state.tripData.filter(t => t.busId === id);\n      // When there are no trips assigned to a bus, don't display it\n      if (busTrips.length < 1) return null;\n      return (\n        <Bus\n          key={id}\n          id={id}\n          label={counter++}\n          handleClick={this.handleClick}\n          selectedTrip={this.state.selectedTrip}\n          busTrips={busTrips}\n        />\n      );\n    });\n\n    return (\n      <React.Fragment>\n        {busRows}\n        {this.renderProvisionalBusRow()}\n      </React.Fragment>\n    );\n  }\n}\n\nBoard.propTypes = {\n  tripData: PropTypes.arrayOf(PropTypes.object).isRequired,\n  busData: PropTypes.arrayOf(PropTypes.number).isRequired\n};\n\nexport default Board;\n","import React from \"react\";\nimport data from \"../../bus-scheduling-input\";\n// eslint-disable-next-line no-unused-vars\nimport Board from \"../Board\";\nimport \"./styles.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.trips = data.map(trip => {\n      return { ...trip, busId: trip.id };\n    });\n    this.buses = this.trips.map(t => t.id);\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"time-wrapper\">\n          <div className=\"time-label\">0:00</div>\n          <div className=\"time-label\">1:00</div>\n          <div className=\"time-label\">2:00</div>\n          <div className=\"time-label\">3:00</div>\n          <div className=\"time-label\">4:00</div>\n          <div className=\"time-label\">5:00</div>\n          <div className=\"time-label\">6:00</div>\n          <div className=\"time-label\">7:00</div>\n          <div className=\"time-label\">8:00</div>\n          <div className=\"time-label\">9:00</div>\n        </div>\n        <Board tripData={this.trips} busData={this.buses} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './components/App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}